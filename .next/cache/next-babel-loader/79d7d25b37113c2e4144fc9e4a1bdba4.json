{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ayan Hussian\\\\space\\\\pages\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { useRouter } from 'next/router';\nimport Header from '../components/Header.js';\nimport Footer from '../components/Footer.js';\nimport Layout from '../components/Layout.js';\nimport XSPFilters from '../components/XSPFilters.js';\nimport LauchList from '../components/LaunchList/LaunchList';\nimport { getParam, setParam } from '../helper/urlManipulation.js';\n\nfunction HomePage({\n  posts\n}) {\n  const queryString1 = require('query-string');\n\n  const history = useHistory();\n  const router = useRouter();\n  let initialState = [{\n    type: \"launch_year\",\n    displayName: \"Launch Year\",\n    data: new Array(new Date().getFullYear() - 2005).fill().map((a, i) => 2006 + i) //activeItem: this.props.query[\"launch_year\"] && parseInt(this.props.query[\"launch_year\"])\n\n  }, {\n    type: \"launch_success\",\n    displayName: \"Successful Launch\",\n    data: [\"true\", \"false\"] //activeItem: this.props.query[\"launch_success\"]\n\n  }, {\n    type: \"land_success\",\n    displayName: \"Successful Landing\",\n    data: [\"true\", \"false\"] //activeItem: this.props.query[\"land_success\"]\n\n  }];\n  const {\n    0: filterState,\n    1: setFilterState\n  } = useState(initialState);\n  const {\n    0: spaceXData,\n    1: setSpaceXData\n  } = useState([]);\n  const {\n    0: urlQuery,\n    1: setUrlQuery\n  } = useState();\n  const currentQueries = getParam();\n\n  function UpdateQueryString(key, value, url) {\n    if (!url) url = window.location.href;\n    var re = new RegExp(\"([?&])\" + key + \"=.*?(&|#|$)(.*)\", \"gi\"),\n        hash;\n\n    if (re.test(url)) {\n      if (typeof value !== 'undefined' && value !== null) {\n        return url.replace(re, '$1' + key + \"=\" + value + '$2$3');\n      } else {\n        hash = url.split('#');\n        url = hash[0].replace(re, '$1$3').replace(/(&|\\?)$/, '');\n\n        if (typeof hash[1] !== 'undefined' && hash[1] !== null) {\n          url += '#' + hash[1];\n        }\n\n        return url;\n      }\n    } else {\n      if (typeof value !== 'undefined' && value !== null) {\n        var separator = url.indexOf('?') !== -1 ? '&' : '?';\n        hash = url.split('#');\n        url = hash[0] + separator + key + '=' + value;\n\n        if (typeof hash[1] !== 'undefined' && hash[1] !== null) {\n          url += '#' + hash[1];\n        }\n\n        return url;\n      } else {\n        return url;\n      }\n    }\n  }\n\n  useEffect(() => {\n    setSpaceXData(posts);\n  }, [0]);\n\n  let launchList = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 22\n  }, this);\n\n  launchList = /*#__PURE__*/_jsxDEV(LauchList, {\n    launchData: spaceXData // dataLimit={this.state.dataLimit}\n    // fetchMoreData={this.fetchMoreData}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 18\n  }, this);\n\n  const onFilterApply = (category, value) => {\n    const currentQueries = [];\n    currentQueries[category] = value;\n    const queryString = setParam(currentQueries);\n    router.push(\"?\" + queryString);\n    setUrlQuery(queryString);\n    let heelo = UpdateQueryString(category, value, window.location.href);\n    console.log('heelo', heelo);\n    setUrlQuery(queryString);\n    console.log(\"searchwa\", location.search); // if (error) return <div>failed to load</div>\n    // if (!data) return <div>loading...</div>\n    // return <div>hello {data.name}!</div>\n    // const currentQueries = getParam(this.state.queryString);\n    // const currentCategory = { ...this.state.filterData.find(filterCategory => filterCategory.type === category) };\n    // if (currentCategory.activeItem && currentCategory.activeItem === value) {\n    //     currentQueries[category] = null;\n    //     currentCategory.activeItem = null;\n    // }\n    // else {\n    //     currentCategory.activeItem = value;\n    //     currentQueries[category] = value;\n    // }\n    // const queryString = setParam(currentQueries);\n    // this.props.history.push(\"?\" + queryString);\n    // this.setState(prevState => {\n    //     return {\n    //         filterData: prevState.filterData.map(filterCategory => filterCategory.type === category ? currentCategory : filterCategory),\n    //         queryString: queryString\n    //     }\n    // })\n  };\n\n  useEffect(() => {\n    fetch(`https://api.spaceXdata.com/v3/launches?${urlQuery}`).then(response => response.json()).then(data => setSpaceXData(data));\n    console.log('query', `https://api.spaceXdata.com/v3/launches?${urlQuery}`);\n  }, [urlQuery]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(XSPFilters, {\n        filterData: filterState,\n        onFilterApply: onFilterApply\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this), launchList]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch('https://api.spaceXdata.com/v3/launches?limit=100');\n  const posts = await res.json(); // By returning { props: posts }, the Blog component\n  // will receive `posts` as a prop at build time\n\n  return {\n    props: {\n      posts\n    }\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/Ayan Hussian/space/pages/index.js"],"names":["React","useState","useEffect","useHistory","useRouter","Header","Footer","Layout","XSPFilters","LauchList","getParam","setParam","HomePage","posts","queryString1","require","history","router","initialState","type","displayName","data","Array","Date","getFullYear","fill","map","a","i","filterState","setFilterState","spaceXData","setSpaceXData","urlQuery","setUrlQuery","currentQueries","UpdateQueryString","key","value","url","window","location","href","re","RegExp","hash","test","replace","split","separator","indexOf","launchList","onFilterApply","category","queryString","push","heelo","console","log","search","fetch","then","response","json","getStaticProps","res","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,8BAAnC;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EAA2B;AACzB,QAAMC,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B;;AACA,QAAMC,OAAO,GAAGb,UAAU,EAA1B;AACA,QAAMc,MAAM,GAAGb,SAAS,EAAxB;AACA,MAAIc,YAAY,GAAG,CAAC;AACdC,IAAAA,IAAI,EAAE,aADQ;AAEdC,IAAAA,WAAW,EAAE,aAFC;AAGdC,IAAAA,IAAI,EAAE,IAAIC,KAAJ,CAAW,IAAIC,IAAJ,GAAWC,WAAX,KAA2B,IAAtC,EAA6CC,IAA7C,GAAoDC,GAApD,CAAwD,CAACC,CAAD,EAAIC,CAAJ,KAAU,OAAOA,CAAzE,CAHQ,CAId;;AAJc,GAAD,EAMjB;AACIT,IAAAA,IAAI,EAAE,gBADV;AAEIC,IAAAA,WAAW,EAAE,mBAFjB;AAGIC,IAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,OAAT,CAHV,CAII;;AAJJ,GANiB,EAYjB;AACIF,IAAAA,IAAI,EAAE,cADV;AAEIC,IAAAA,WAAW,EAAE,oBAFjB;AAGIC,IAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,OAAT,CAHV,CAII;;AAJJ,GAZiB,CAAnB;AAmBE,QAAM;AAAA,OAACQ,WAAD;AAAA,OAAcC;AAAd,MAAgC7B,QAAQ,CAACiB,YAAD,CAA9C;AACA,QAAM;AAAA,OAACa,UAAD;AAAA,OAAaC;AAAb,MAA8B/B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACgC,QAAD;AAAA,OAAWC;AAAX,MAA0BjC,QAAQ,EAAxC;AAEA,QAAMkC,cAAc,GAAGzB,QAAQ,EAA/B;;AAEA,WAAS0B,iBAAT,CAA2BC,GAA3B,EAAgCC,KAAhC,EAAuCC,GAAvC,EAA4C;AAC1C,QAAI,CAACA,GAAL,EAAUA,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAtB;AACV,QAAIC,EAAE,GAAG,IAAIC,MAAJ,CAAW,WAAWP,GAAX,GAAiB,iBAA5B,EAA+C,IAA/C,CAAT;AAAA,QACIQ,IADJ;;AAGA,QAAIF,EAAE,CAACG,IAAH,CAAQP,GAAR,CAAJ,EAAkB;AACd,UAAI,OAAOD,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAK,IAA9C,EAAoD;AAChD,eAAOC,GAAG,CAACQ,OAAJ,CAAYJ,EAAZ,EAAgB,OAAON,GAAP,GAAa,GAAb,GAAmBC,KAAnB,GAA2B,MAA3C,CAAP;AACH,OAFD,MAGK;AACDO,QAAAA,IAAI,GAAGN,GAAG,CAACS,KAAJ,CAAU,GAAV,CAAP;AACAT,QAAAA,GAAG,GAAGM,IAAI,CAAC,CAAD,CAAJ,CAAQE,OAAR,CAAgBJ,EAAhB,EAAoB,MAApB,EAA4BI,OAA5B,CAAoC,SAApC,EAA+C,EAA/C,CAAN;;AACA,YAAI,OAAOF,IAAI,CAAC,CAAD,CAAX,KAAmB,WAAnB,IAAkCA,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAlD,EAAwD;AACpDN,UAAAA,GAAG,IAAI,MAAMM,IAAI,CAAC,CAAD,CAAjB;AACH;;AACD,eAAON,GAAP;AACH;AACJ,KAZD,MAaK;AACD,UAAI,OAAOD,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAK,IAA9C,EAAoD;AAChD,YAAIW,SAAS,GAAGV,GAAG,CAACW,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GAA0B,GAA1B,GAAgC,GAAhD;AACAL,QAAAA,IAAI,GAAGN,GAAG,CAACS,KAAJ,CAAU,GAAV,CAAP;AACAT,QAAAA,GAAG,GAAGM,IAAI,CAAC,CAAD,CAAJ,GAAUI,SAAV,GAAsBZ,GAAtB,GAA4B,GAA5B,GAAkCC,KAAxC;;AACA,YAAI,OAAOO,IAAI,CAAC,CAAD,CAAX,KAAmB,WAAnB,IAAkCA,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAlD,EAAwD;AACpDN,UAAAA,GAAG,IAAI,MAAMM,IAAI,CAAC,CAAD,CAAjB;AACH;;AACD,eAAON,GAAP;AACH,OARD,MASK;AACD,eAAOA,GAAP;AACH;AACJ;AACJ;;AAECrC,EAAAA,SAAS,CAAC,MAAM;AACd8B,IAAAA,aAAa,CAACnB,KAAD,CAAb;AACD,GAFQ,EAEN,CAAC,CAAD,CAFM,CAAT;;AAIA,MAAIsC,UAAU,gBAAG;AAAA;AAAA;AAAA;AAAA,UAAjB;;AAEAA,EAAAA,UAAU,gBAAG,QAAC,SAAD;AACG,IAAA,UAAU,EAAEpB,UADf,CAEG;AACA;;AAHH;AAAA;AAAA;AAAA;AAAA,UAAb;;AAMA,QAAMqB,aAAa,GAAG,CAACC,QAAD,EAAWf,KAAX,KAAqB;AAE3C,UAAMH,cAAc,GAAG,EAAvB;AACAA,IAAAA,cAAc,CAACkB,QAAD,CAAd,GAA2Bf,KAA3B;AACA,UAAMgB,WAAW,GAAG3C,QAAQ,CAACwB,cAAD,CAA5B;AACAlB,IAAAA,MAAM,CAACsC,IAAP,CAAY,MAAMD,WAAlB;AACApB,IAAAA,WAAW,CAACoB,WAAD,CAAX;AACA,QAAIE,KAAK,GAAGpB,iBAAiB,CAACiB,QAAD,EAAWf,KAAX,EAAkBE,MAAM,CAACC,QAAP,CAAgBC,IAAlC,CAA7B;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACAtB,IAAAA,WAAW,CAACoB,WAAD,CAAX;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBjB,QAAQ,CAACkB,MAAjC,EAX2C,CAazC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GApCC;;AAsCFzD,EAAAA,SAAS,CAAC,MAAM;AACd0D,IAAAA,KAAK,CAAE,0CAAyC3B,QAAS,EAApD,CAAL,CAA4D4B,IAA5D,CAAiEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAA7E,EAA8FF,IAA9F,CAAmGxC,IAAI,IAAIW,aAAa,CAACX,IAAD,CAAxH;AACAoC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAsB,0CAAyCzB,QAAS,EAAxE;AACD,GAHQ,EAGN,CAACA,QAAD,CAHM,CAAT;AAKA,sBAAO;AAAA,4BACP,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADO,eAEL,QAAC,MAAD;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,UAAU,EAAEJ,WAAxB;AAAqC,QAAA,aAAa,EAAEuB;AAApD;AAAA;AAAA;AAAA;AAAA,cADF,EAEGD,UAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFK,eAMP,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YANO;AAAA,kBAAP;AAQD;;AAED,OAAO,eAAea,cAAf,GAAgC;AACrC;AACA;AACA,QAAMC,GAAG,GAAG,MAAML,KAAK,CAAC,kDAAD,CAAvB;AACA,QAAM/C,KAAK,GAAG,MAAMoD,GAAG,CAACF,IAAJ,EAApB,CAJqC,CAMrC;AACA;;AACA,SAAO;AACLG,IAAAA,KAAK,EAAE;AACLrD,MAAAA;AADK;AADF,GAAP;AAKD;AAED,eAAeD,QAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useRouter } from 'next/router'\r\n\r\nimport Header from '../components/Header.js'\r\nimport Footer from '../components/Footer.js'\r\nimport Layout from '../components/Layout.js'\r\nimport XSPFilters from '../components/XSPFilters.js';\r\nimport LauchList from '../components/LaunchList/LaunchList';\r\nimport { getParam, setParam } from '../helper/urlManipulation.js';\r\n\r\nfunction HomePage({posts}) {\r\n  const queryString1 = require('query-string');\r\n  const history = useHistory();\r\n  const router = useRouter()\r\n  let initialState = [{\r\n        type: \"launch_year\",\r\n        displayName: \"Launch Year\",\r\n        data: new Array((new Date().getFullYear() - 2005)).fill().map((a, i) => 2006 + i),\r\n        //activeItem: this.props.query[\"launch_year\"] && parseInt(this.props.query[\"launch_year\"])\r\n    },\r\n    {\r\n        type: \"launch_success\",\r\n        displayName: \"Successful Launch\",\r\n        data: [\"true\", \"false\"],\r\n        //activeItem: this.props.query[\"launch_success\"]\r\n    },\r\n    {\r\n        type: \"land_success\",\r\n        displayName: \"Successful Landing\",\r\n        data: [\"true\", \"false\"],\r\n        //activeItem: this.props.query[\"land_success\"]\r\n    }]\r\n\r\n    const [filterState, setFilterState] = useState(initialState);\r\n    const [spaceXData, setSpaceXData] = useState([]);\r\n    const [urlQuery, setUrlQuery] = useState();\r\n\r\n    const currentQueries = getParam();\r\n\r\n    function UpdateQueryString(key, value, url) {\r\n      if (!url) url = window.location.href;\r\n      var re = new RegExp(\"([?&])\" + key + \"=.*?(&|#|$)(.*)\", \"gi\"),\r\n          hash;\r\n  \r\n      if (re.test(url)) {\r\n          if (typeof value !== 'undefined' && value !== null) {\r\n              return url.replace(re, '$1' + key + \"=\" + value + '$2$3');\r\n          } \r\n          else {\r\n              hash = url.split('#');\r\n              url = hash[0].replace(re, '$1$3').replace(/(&|\\?)$/, '');\r\n              if (typeof hash[1] !== 'undefined' && hash[1] !== null) {\r\n                  url += '#' + hash[1];\r\n              }\r\n              return url;\r\n          }\r\n      }\r\n      else {\r\n          if (typeof value !== 'undefined' && value !== null) {\r\n              var separator = url.indexOf('?') !== -1 ? '&' : '?';\r\n              hash = url.split('#');\r\n              url = hash[0] + separator + key + '=' + value;\r\n              if (typeof hash[1] !== 'undefined' && hash[1] !== null) {\r\n                  url += '#' + hash[1];\r\n              }\r\n              return url;\r\n          }\r\n          else {\r\n              return url;\r\n          }\r\n      }\r\n  }\r\n\r\n    useEffect(() => {\r\n      setSpaceXData(posts);\r\n    }, [0])\r\n\r\n    let launchList = <div></div>;\r\n\r\n    launchList = <LauchList\r\n                    launchData={spaceXData}\r\n                    // dataLimit={this.state.dataLimit}\r\n                    // fetchMoreData={this.fetchMoreData}\r\n                />\r\n\r\n    const onFilterApply = (category, value) => {\r\n\r\n    const currentQueries = [];\r\n    currentQueries[category] = value;\r\n    const queryString = setParam(currentQueries);\r\n    router.push(\"?\" + queryString)\r\n    setUrlQuery(queryString);\r\n    let heelo = UpdateQueryString(category, value, window.location.href);\r\n    console.log('heelo', heelo)\r\n    setUrlQuery(queryString);\r\n\r\n    console.log(\"searchwa\", location.search);\r\n\r\n      // if (error) return <div>failed to load</div>\r\n      // if (!data) return <div>loading...</div>\r\n      // return <div>hello {data.name}!</div>\r\n      // const currentQueries = getParam(this.state.queryString);\r\n      // const currentCategory = { ...this.state.filterData.find(filterCategory => filterCategory.type === category) };\r\n\r\n      // if (currentCategory.activeItem && currentCategory.activeItem === value) {\r\n      //     currentQueries[category] = null;\r\n      //     currentCategory.activeItem = null;\r\n      // }\r\n      // else {\r\n      //     currentCategory.activeItem = value;\r\n      //     currentQueries[category] = value;\r\n      // }\r\n      // const queryString = setParam(currentQueries);\r\n\r\n      // this.props.history.push(\"?\" + queryString);\r\n      // this.setState(prevState => {\r\n      //     return {\r\n      //         filterData: prevState.filterData.map(filterCategory => filterCategory.type === category ? currentCategory : filterCategory),\r\n      //         queryString: queryString\r\n      //     }\r\n      // })\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch(`https://api.spaceXdata.com/v3/launches?${urlQuery}`).then(response => response.json()).then(data => setSpaceXData(data));\r\n    console.log('query', `https://api.spaceXdata.com/v3/launches?${urlQuery}`)\r\n  }, [urlQuery])\r\n\r\n  return <>\r\n  <Header />\r\n    <Layout>\r\n      <XSPFilters filterData={filterState} onFilterApply={onFilterApply} />\r\n      {launchList}\r\n    </Layout>\r\n  <Footer />\r\n  </>\r\n}\r\n\r\nexport async function getStaticProps() {\r\n  // Call an external API endpoint to get posts.\r\n  // You can use any data fetching library\r\n  const res = await fetch('https://api.spaceXdata.com/v3/launches?limit=100')\r\n  const posts = await res.json()\r\n\r\n  // By returning { props: posts }, the Blog component\r\n  // will receive `posts` as a prop at build time\r\n  return {\r\n    props: {\r\n      posts,\r\n    },\r\n  }\r\n}\r\n\r\nexport default HomePage"]},"metadata":{},"sourceType":"module"}