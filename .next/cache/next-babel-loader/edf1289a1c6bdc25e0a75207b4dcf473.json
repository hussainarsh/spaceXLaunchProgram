{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ayan Hussian\\\\space\\\\pages\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { createHashHistory } from 'history';\nimport { useRouter } from 'next/router';\nimport qs from 'query-string';\nimport Header from '../components/Header.js';\nimport Footer from '../components/Footer.js';\nimport Layout from '../components/Layout.js';\nimport XSPFilters from '../components/XSPFilters.js';\nimport LauchList from '../components/LaunchList/LaunchList';\nimport { getParam, setParam } from '../helper/urlManipulation.js';\n\nfunction HomePage({\n  posts\n}) {\n  const queryString1 = require('query-string');\n\n  const history = useHistory();\n  const router = useRouter();\n  let initialState = [{\n    type: \"launch_year\",\n    displayName: \"Launch Year\",\n    data: new Array(new Date().getFullYear() - 2005).fill().map((a, i) => 2006 + i) //activeItem: this.props.query[\"launch_year\"] && parseInt(this.props.query[\"launch_year\"])\n\n  }, {\n    type: \"launch_success\",\n    displayName: \"Successful Launch\",\n    data: [\"true\", \"false\"] //activeItem: this.props.query[\"launch_success\"]\n\n  }, {\n    type: \"land_success\",\n    displayName: \"Successful Landing\",\n    data: [\"true\", \"false\"] //activeItem: this.props.query[\"land_success\"]\n\n  }];\n  const {\n    0: filterState,\n    1: setFilterState\n  } = useState(initialState);\n  const {\n    0: spaceXData,\n    1: setSpaceXData\n  } = useState([]);\n  const {\n    0: urlQuery,\n    1: setUrlQuery\n  } = useState();\n  const currentQueries = getParam();\n  useEffect(() => {\n    setSpaceXData(posts);\n  }, [0]);\n\n  let launchList = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 22\n  }, this);\n\n  launchList = /*#__PURE__*/_jsxDEV(LauchList, {\n    launchData: spaceXData // dataLimit={this.state.dataLimit}\n    // fetchMoreData={this.fetchMoreData}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 18\n  }, this);\n\n  const filterAllowedParams = (queries, allowedParams) => {\n    return allowedParams.reduce((acc, param) => {\n      if (Object.prototype.hasOwnProperty.call(queries, param)) {\n        acc[param] = queries[param];\n      }\n\n      return acc;\n    }, {});\n  };\n\n  const onFilterApply = (key, value) => {\n    let pathname = location.pathname; // returns path: '/app/books'\n\n    let searchParams = new URLSearchParams(location.search); // returns the existing query string: '?type=fiction&author=fahid'\n\n    searchParams.set(key, value);\n    history.push({\n      pathname: pathname,\n      search: searchParams.toString()\n    });\n  };\n\n  const onFilterApply1 = (category, value) => {\n    const queryParam = qs.parse(location.search);\n\n    const newQueryParam = _objectSpread(_objectSpread({}, queryParam), {}, {\n      launch_year: category === 'launch_year' ? value : ''\n    }); // const currentQueries = {};\n    // currentQueries[category] = value;\n    // //const queryString = setParam(currentQueries);\n    // //router.push(\"?\" + queryString)\n    // const history = createHashHistory()\n    // const allowedQueriesParams = filterAllowedParams(currentQueries, ['launch_year', 'launch_success', 'land_success']);\n    // const newQueryString = qs.stringify({ ...qs.parse(location.search), ...allowedQueriesParams });\n    // const queryString = setParam(allowedQueriesParams);\n    // //history.push(`${location.pathname}${queryString ? `?${queryString}` : ''}`);\n    // history.push(queryString);\n    // setUrlQuery(queryString);\n\n\n    console.log('newQueryParam', newQueryParam); // const currentQueries = getParam(this.state.queryString);\n    // const currentCategory = { ...this.state.filterData.find(filterCategory => filterCategory.type === category) };\n    // if (currentCategory.activeItem && currentCategory.activeItem === value) {\n    //     currentQueries[category] = null;\n    //     currentCategory.activeItem = null;\n    // }\n    // else {\n    //     currentCategory.activeItem = value;\n    //     currentQueries[category] = value;\n    // }\n    // const queryString = setParam(currentQueries);\n    // this.props.history.push(\"?\" + queryString);\n    // this.setState(prevState => {\n    //     return {\n    //         filterData: prevState.filterData.map(filterCategory => filterCategory.type === category ? currentCategory : filterCategory),\n    //         queryString: queryString\n    //     }\n    // })\n  };\n\n  useEffect(() => {\n    fetch(`https://api.spaceXdata.com/v3/launches?${urlQuery}`).then(response => response.json()).then(data => setSpaceXData(data));\n    console.log('query', `https://api.spaceXdata.com/v3/launches?${urlQuery}`);\n  }, [urlQuery]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(XSPFilters, {\n        filterData: filterState,\n        onFilterApply: onFilterApply\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this), launchList]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch('https://api.spaceXdata.com/v3/launches?limit=100');\n  const posts = await res.json(); // By returning { props: posts }, the Blog component\n  // will receive `posts` as a prop at build time\n\n  return {\n    props: {\n      posts\n    }\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/Ayan Hussian/space/pages/index.js"],"names":["React","useState","useEffect","useHistory","createHashHistory","useRouter","qs","Header","Footer","Layout","XSPFilters","LauchList","getParam","setParam","HomePage","posts","queryString1","require","history","router","initialState","type","displayName","data","Array","Date","getFullYear","fill","map","a","i","filterState","setFilterState","spaceXData","setSpaceXData","urlQuery","setUrlQuery","currentQueries","launchList","filterAllowedParams","queries","allowedParams","reduce","acc","param","Object","prototype","hasOwnProperty","call","onFilterApply","key","value","pathname","location","searchParams","URLSearchParams","search","set","push","toString","onFilterApply1","category","queryParam","parse","newQueryParam","launch_year","console","log","fetch","then","response","json","getStaticProps","res","props"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createHashHistory } from 'history'\r\nimport { useRouter } from 'next/router'\r\nimport qs from 'query-string';\r\n\r\nimport Header from '../components/Header.js'\r\nimport Footer from '../components/Footer.js'\r\nimport Layout from '../components/Layout.js'\r\nimport XSPFilters from '../components/XSPFilters.js';\r\nimport LauchList from '../components/LaunchList/LaunchList';\r\nimport { getParam, setParam } from '../helper/urlManipulation.js';\r\n\r\nfunction HomePage({posts}) {\r\n  const queryString1 = require('query-string');\r\n  const history = useHistory();\r\n  const router = useRouter()\r\n  let initialState = [{\r\n        type: \"launch_year\",\r\n        displayName: \"Launch Year\",\r\n        data: new Array((new Date().getFullYear() - 2005)).fill().map((a, i) => 2006 + i),\r\n        //activeItem: this.props.query[\"launch_year\"] && parseInt(this.props.query[\"launch_year\"])\r\n    },\r\n    {\r\n        type: \"launch_success\",\r\n        displayName: \"Successful Launch\",\r\n        data: [\"true\", \"false\"],\r\n        //activeItem: this.props.query[\"launch_success\"]\r\n    },\r\n    {\r\n        type: \"land_success\",\r\n        displayName: \"Successful Landing\",\r\n        data: [\"true\", \"false\"],\r\n        //activeItem: this.props.query[\"land_success\"]\r\n    }]\r\n\r\n    const [filterState, setFilterState] = useState(initialState);\r\n    const [spaceXData, setSpaceXData] = useState([]);\r\n    const [urlQuery, setUrlQuery] = useState();\r\n\r\n    const currentQueries = getParam();\r\n\r\n    useEffect(() => {\r\n      setSpaceXData(posts);\r\n    }, [0])\r\n\r\n    let launchList = <div></div>;\r\n\r\n    launchList = <LauchList\r\n                    launchData={spaceXData}\r\n                    // dataLimit={this.state.dataLimit}\r\n                    // fetchMoreData={this.fetchMoreData}\r\n                />\r\n\r\n                const filterAllowedParams = (queries, allowedParams) => {\r\n                  return allowedParams.reduce((acc, param) => {\r\n                    if (Object.prototype.hasOwnProperty.call(queries, param)) {\r\n                      acc[param] = queries[param];\r\n                    }\r\n                    return acc;\r\n                  }, {});\r\n                };\r\n\r\n                const onFilterApply = (key, value) => {\r\n                  let pathname = location.pathname;\r\n                  // returns path: '/app/books'\r\n                  let searchParams = new URLSearchParams(location.search);\r\n                  // returns the existing query string: '?type=fiction&author=fahid'\r\n                  searchParams.set(key, value);\r\n                  history.push({\r\n                    pathname: pathname,\r\n                    search: searchParams.toString()\r\n                  });\r\n                };\r\n\r\n    const onFilterApply1 = (category, value) => {\r\n\r\n      const queryParam = qs.parse(location.search);\r\n      const newQueryParam = {\r\n        ...queryParam,\r\n        launch_year: category === 'launch_year' ? value : ''\r\n      }\r\n\r\n      // const currentQueries = {};\r\n      // currentQueries[category] = value;\r\n      // //const queryString = setParam(currentQueries);\r\n      // //router.push(\"?\" + queryString)\r\n      \r\n      // const history = createHashHistory()\r\n      // const allowedQueriesParams = filterAllowedParams(currentQueries, ['launch_year', 'launch_success', 'land_success']);\r\n      // const newQueryString = qs.stringify({ ...qs.parse(location.search), ...allowedQueriesParams });\r\n      // const queryString = setParam(allowedQueriesParams);\r\n      // //history.push(`${location.pathname}${queryString ? `?${queryString}` : ''}`);\r\n      // history.push(queryString);\r\n      // setUrlQuery(queryString);\r\n      console.log('newQueryParam', newQueryParam)\r\n      // const currentQueries = getParam(this.state.queryString);\r\n      // const currentCategory = { ...this.state.filterData.find(filterCategory => filterCategory.type === category) };\r\n\r\n      // if (currentCategory.activeItem && currentCategory.activeItem === value) {\r\n      //     currentQueries[category] = null;\r\n      //     currentCategory.activeItem = null;\r\n      // }\r\n      // else {\r\n      //     currentCategory.activeItem = value;\r\n      //     currentQueries[category] = value;\r\n      // }\r\n      // const queryString = setParam(currentQueries);\r\n\r\n      // this.props.history.push(\"?\" + queryString);\r\n      // this.setState(prevState => {\r\n      //     return {\r\n      //         filterData: prevState.filterData.map(filterCategory => filterCategory.type === category ? currentCategory : filterCategory),\r\n      //         queryString: queryString\r\n      //     }\r\n      // })\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch(`https://api.spaceXdata.com/v3/launches?${urlQuery}`).then(response => response.json()).then(data => setSpaceXData(data));\r\n    console.log('query', `https://api.spaceXdata.com/v3/launches?${urlQuery}`)\r\n  }, [urlQuery])\r\n\r\n  return <>\r\n  <Header />\r\n    <Layout>\r\n      <XSPFilters filterData={filterState} onFilterApply={onFilterApply} />\r\n      {launchList}\r\n    </Layout>\r\n  <Footer />\r\n  </>\r\n}\r\n\r\nexport async function getStaticProps() {\r\n  // Call an external API endpoint to get posts.\r\n  // You can use any data fetching library\r\n  const res = await fetch('https://api.spaceXdata.com/v3/launches?limit=100')\r\n  const posts = await res.json()\r\n\r\n  // By returning { props: posts }, the Blog component\r\n  // will receive `posts` as a prop at build time\r\n  return {\r\n    props: {\r\n      posts,\r\n    },\r\n  }\r\n}\r\n\r\nexport default HomePage"]},"metadata":{},"sourceType":"module"}